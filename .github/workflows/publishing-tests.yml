name: "publishing-tests"

on:
  workflow_call:
    inputs: {}

jobs:
  pester:
    name: pester
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
      - id: auto-release
        uses: cloud-tek/actions/auto-release@0.19
        with:
          branch: main
          configuration: .config/configuration.changelog.json
      - name: setup gitversion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'
      - name: run giversion
        uses: gittools/actions/gitversion/execute@v0.9.15
      - name: nuget.config (pwsh)
        shell: pwsh
        run: |
          $nuget = @"
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
            </packageSources>
            <packageRestore>
              <add key="enabled" value="True" />
              <add key="automatic" value="True" />
            </packageRestore>
            <bindingRedirects>
              <add key="skip" value="False" />
            </bindingRedirects>
            <packageManagement>
              <add key="format" value="0" />
              <add key="disabled" value="False" />
            </packageManagement>
          </configuration>
          "@
          $nuget | Out-File -FilePath ${{ github.workspace }}/nuget.config
      - name: Install-Module(s)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          Install-Module PowershellGet -Force -AllowPrerelease;
          Install-Module Pester -Force;
      - name: Versioning-Tests.ps1
        shell: pwsh
        working-directory: ${{ github.workspace }}/tests
        run: |
          Import-Module "Pester";

          $configuration = [PesterConfiguration]@{
            Run = @{
              Path = "${{ github.workspace }}/tests/Versioning-Tests.ps1"
            }
            Debug = @{
              ShowFullErrors = $true
              WriteDebugMessages = $true
              WriteDebugMessagesFrom = "Mock"
            }
            Output = @{
              Verbosity = "Normal"
            }
            CodeCoverage = @{
              Enabled = $false
              # OutputFormat = "Cobertura"
              # OutputPath = "${{ github.workspace }}/tests/versioning-tests.coverage.xml"
            }
            TestResult = @{
              Enabled = $true
              OutputFormat = "JUnitXml"
              OutputPath = "${{ github.workspace }}/tests/versioning-tests.results.xml"
            }
          };

          Invoke-Pester -Configuration $configuration;
      - name: Publishing-Tests.ps1
        shell: pwsh
        working-directory: ${{ github.workspace }}/tests
        run: |
          Import-Module "Pester";

          $configuration = [PesterConfiguration]@{
            Run = @{
              Path = "${{ github.workspace }}/tests/Publishing-Tests.ps1"
            }
            Debug = @{
              ShowFullErrors = $true
              WriteDebugMessages = $true
              WriteDebugMessagesFrom = "Mock"
            }
            Output = @{
              Verbosity = "Normal"
            }
            CodeCoverage = @{
              Enabled = $false
              # OutputFormat = "Cobertura"
              # OutputPath = "${{ github.workspace }}/tests/publishing-tests.coverage.xml"
            }
            TestResult = @{
              Enabled = $true
              OutputFormat = "JUnitXml"
              OutputPath = "${{ github.workspace }}/tests/publishing-tests.results.xml"
            }
          };

          Invoke-Pester -Configuration $configuration;
      - name: ls packages
        if: success() || failure()
        shell: bash
        working-directory: ${{ github.workspace }}/packages
        run: |
          ls -l
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Publishing Test Results
          path: ${{ github.workspace }}/tests/*.results.xml
          reporter: java-junit

